class Solution {
    public int pairSum(ListNode head) {
        // Step 1: Find the middle of the linked list
        ListNode slow = head;
        ListNode fast = head;
        
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        
        // Step 2: Reverse the second half of the list
        ListNode prev = null;
        ListNode curr = slow;
        while (curr != null) {
            ListNode nextNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextNode;
        }
        
        // Step 3: Calculate the twin sums and find the maximum sum
        int maxSum = 0;
        ListNode firstHalf = head;
        ListNode secondHalf = prev;  // prev is now the head of the reversed second half
        
        while (secondHalf != null) {
            int sum = firstHalf.val + secondHalf.val;
            maxSum = Math.max(maxSum, sum);
            firstHalf = firstHalf.next;
            secondHalf = secondHalf.next;
        }
        
        return maxSum;
    }
}
