class Solution {
    public int longestSubarray(int[] nums) {
        int maxLength = 0;
        int zeroCount = 0;
        int left = 0; // Left pointer of the sliding window
        
        for (int right = 0; right < nums.length; right++) {
            if (nums[right] == 0) {
                zeroCount++;
            }
            
            // Ensure we have at most one zero in the window
            while (zeroCount > 1) {
                if (nums[left] == 0) {
                    zeroCount--;
                }
                left++;
            }
            
            // Calculate the length of the current window, minus one for the deletion
            maxLength = Math.max(maxLength, right - left);
        }
        
        // Edge case: if there are no zeros, we need to delete one element, so we return nums.length - 1
        if (zeroCount == 0) {
            return nums.length - 1;
        }
        
        return maxLength;
    }
}
