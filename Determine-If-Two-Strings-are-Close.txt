//checking for lengths if length doesnt equals its false. if it does we have to check for characters only unique is enough they have to be equal otherwise it will return false

class Solution {
    public boolean closeStrings(String word1, String word2) {
         // Step 1: Check if lengths are the same
        if (word1.length() != word2.length()) {
            return false;
        }

        // Step 2: Create sets of unique characters in each word
        Set<Character> set1 = new HashSet<>();
        Set<Character> set2 = new HashSet<>();
        
        // Frequency arrays for each word (since only lowercase letters are involved)
        int[] freq1 = new int[26];
        int[] freq2 = new int[26];
        
        for (char c : word1.toCharArray()) {
            set1.add(c);
            freq1[c - 'a']++;
        }
        
        for (char c : word2.toCharArray()) {
            set2.add(c);
            freq2[c - 'a']++;
        }
        
        // Step 3: Ensure both sets of characters are the same
        if (!set1.equals(set2)) {
            return false;
        }
        
        // Step 4: Sort the frequency arrays and compare them
        Arrays.sort(freq1);
        Arrays.sort(freq2);
        
        return Arrays.equals(freq1, freq2);
    }
}



///better algorithm but idk how it works 
class Solution {
    public boolean closeStrings(String word1, String word2) {
         int n = word1.length();
        if (n != word2.length())  return false;    
        if (word1.equals(word2))  return true;   

        int[] count1 = new int['z' + 1];     
        int[] count2 = new int['z' + 1];    
        byte[] bytes = new byte[n];
        word1.getBytes(0, n, bytes, 0);
        for (byte b : bytes)  count1[b]++;
        
        word2.getBytes(0, n, bytes, 0);
        for (byte b : bytes)  count2[b]++;
        
        int maxFreq = 0;
        for (int i = 'a'; i <= 'z'; i++)
            maxFreq = Math.max(maxFreq, Math.max(count1[i], count2[i]));

        byte[] freq = new byte[maxFreq + 1];    
        int count = 0;
        for (int i = 'a'; i <= 'z'; i++) {
            int c1 = count1[i];
            int c2 = count2[i];
            if ((c1 == 0) ^ (c2 == 0))  return false;   
            if (c1 != 0) {
                int f1 = freq[c1]++;
                int f2 = freq[c2]--;
                if (f1 == 0)  count++;  else  if (f1 == -1)  count--;
                if (f2 == 0)  count++;  else  if (f2 ==  1)  count--;
            }
        }
        return count == 0;
    }
}