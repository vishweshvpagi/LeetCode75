class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int length = flowerbed.length;
        
        for (int i = 0; i < length; i++) {
            // Check if the current plot is empty and the adjacent plots are also empty or at the boundaries
            if (flowerbed[i] == 0 &&
                (i == 0 || flowerbed[i - 1] == 0) &&
                (i == length - 1 || flowerbed[i + 1] == 0)) {
                
                // Plant a flower in the current plot
                flowerbed[i] = 1;
                n--;
                
                // If all required flowers are planted, return true
                if (n == 0) {
                    return true;
                }
            }
        }
        
        // If there are still flowers left to plant, return false
        return n <= 0; 
    }
}




///low time complexity
class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int length = flowerbed.length;

        for (int i = 0; i < length; i++) {
            // Check if the current plot is empty and the adjacent plots are also empty or at the boundaries
            if (flowerbed[i] == 0 &&
                (i == 0 || flowerbed[i - 1] == 0) &&
                (i == length - 1 || flowerbed[i + 1] == 0)) {
                
                // Plant a flower in the current plot
                flowerbed[i] = 1;
                n--;
                
                // If all required flowers are planted, return true
                if (n == 0) {
                    return true;
                }

                // Skip the next plot because we just planted a flower at index i
                i++;
            }
    } return n <= 0;
}}